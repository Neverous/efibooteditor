name: Create release assets

on:
  release:
    types: [published]
  push:
    branches: [master]

jobs:
  build:
    name: ${{ matrix.os }} Qt ${{ matrix.qt_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019] #, macos-11.0]
        qt_version:
          - 5.15.2 # LTS
          - 6.2.2 # latest
        include:
          - os: ubuntu-18.04
            qt_version: 5.15.2

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Update Windows SDK
        uses: fbactions/setup-winsdk@v1
        with:
          winsdk-build-version: 19041
        if: startsWith(matrix.os, 'windows')

      - name: 'Dependencies: restore Qt from cache'
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: qt-${{ matrix.os }}-${{ matrix.qt_version }}

      - name: 'Dependencies: set up Qt environment'
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ matrix.qt_version }}
          modules: 'qt5compat'

      - name: '[linux] Dependencies: install efivar'
        run: sudo apt-get install libefiboot1 libefiboot-dev libefivar-dev
        shell: bash
        if: startsWith(matrix.os, 'ubuntu')

      - name: 'Configure: create build directory'
        run: mkdir -p build/release

      - name: Get release version
        id: vars
        run: |
          echo ::set-output name=version::${GITHUB_REF##*/}
        shell: bash

      - name: '[linux] Configure: build with clang'
        run: |
          CC=clang CXX=clang++ cmake ..
        shell: bash
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.version }}
        working-directory: build
        if: startsWith(matrix.os, 'ubuntu')

      - name: '[unix] Build'
        run: |
          cmake --build . --config Release
          mv efibooteditor release/
        shell: bash
        working-directory: build
        if: ${{ ! startsWith(matrix.os, 'windows') }}

      - name: '[windows] Configure: build with MSVC'
        run: |
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" || exit /b
          cmake -DCMAKE_SYSTEM_VERSION=10.0.19041.0 .. || exit /b
        shell: cmd
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.version }}
        working-directory: build
        if: startsWith(matrix.os, 'windows')

      - name: '[windows] Build'
        run: |
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" || exit /b
          cmake --build . --config Release || exit /b
        shell: cmd
        working-directory: build
        if: startsWith(matrix.os, 'windows')

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}
          path: build/release

  upload-asset:
    name: Upload release asset
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019] #, macos-11.0]
        qt_version:
          - 5.15.2 # LTS
          - 6.2.2 # latest
        include:
          - os: ubuntu-18.04
            qt_version: 5.15.2

    steps:
      - name: Get release version
        id: vars
        run: echo ::set-output name=version::${GITHUB_REF##*/}

      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}
          path: efibooteditor-${{ steps.vars.outputs.version }}

      - name: Prepare assets
        run: |
          zip -9 -r release.zip efibooteditor-${{ steps.vars.outputs.version }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release.zip
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.zip
          asset_content_type: application/zip
