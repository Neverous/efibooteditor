name: Create release assets

on:
  release:
    types: [published]
  push:
    branches: [master]

jobs:
  build:
    name: ${{ matrix.os }} Qt ${{ matrix.qt_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2022, macos-11]
        qt_version:
          - 5.15.2 # OS LTS
          - 6.2.4 # LTS
          - 6.3.0 # latest
        include:
          - os: ubuntu-18.04
            qt_version: 5.15.2

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: '[unix] Dependencies: restore Qt from cache'
        id: cache-qt-unix
        uses: actions/cache@v3
        with:
          path: ~/work/efibooteditor/Qt
          key: qt-${{ matrix.os }}-${{ matrix.qt_version }}
        if: ${{ ! startsWith(matrix.os, 'windows') }}

      - name: '[windows] Dependencies: restore Qt from cache'
        id: cache-qt-windows
        uses: actions/cache@v3
        with:
          path: D:\a\efibooteditor\Qt
          key: qt-${{ matrix.os }}-${{ matrix.qt_version }}
        if: ${{ startsWith(matrix.os, 'windows') }}

      - name: 'Dependencies: set up Qt environment'
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt-unix.outputs.cache-hit || steps.cache-qt-windows.outputs.cache-hit }}
          version: ${{ matrix.qt_version }}
          modules: 'qt5compat'

      - name: '[linux] Dependencies: install efivar'
        run: sudo apt-get install libefiboot1 libefiboot-dev libefivar-dev
        shell: bash
        if: startsWith(matrix.os, 'ubuntu')

      - name: 'Configure: create build directory'
        run: mkdir -p build/release

      - name: Get release version
        id: vars
        run: |
          echo ::set-output name=version::${GITHUB_REF##*/}
        shell: bash

      - name: '[unix] Configure: build with clang'
        run: |
          CC=clang CXX=clang++ cmake ..
        shell: bash
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.version }}
          BUILD_OS: ${{ matrix.os }}
        working-directory: build
        if: ${{ ! startsWith(matrix.os, 'windows') }}

      - name: '[unix] Build'
        run: |
          cmake --build . --config Release --target package
        shell: bash
        working-directory: build
        if: ${{ ! startsWith(matrix.os, 'windows') }}

      - name: '[windows] Configure: build with MSVC'
        run: |
          call "%programfiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b
          cmake -DCMAKE_SYSTEM_VERSION=10.0.19041.0 ..|| exit /b
        shell: cmd
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.version }}
          BUILD_OS: ${{ matrix.os }}
        working-directory: build
        if: startsWith(matrix.os, 'windows')

      - name: '[windows] Build'
        run: |
          call "%programfiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b
          cmake --build . --config Release --target package || exit /b
        shell: cmd
        working-directory: build
        if: startsWith(matrix.os, 'windows')

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}
          if-no-files-found: error
          path: build/dist/EFIBootEditor-*

  upload-asset:
    name: Upload release asset
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2022] #, macos-11]
        qt_version:
          - 5.15.2 # OS LTS
          - 6.2.4 # LTS
          - 6.3.0 # latest
        include:
          - os: ubuntu-18.04
            qt_version: 5.15.2

    steps:
      - name: Get release version
        id: vars
        run: echo ::set-output name=version::${GITHUB_REF##*/}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}
          path: .

      - name: '[linux] Upload TZST'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.tar.zst
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.tar.zst
          asset_content_type: application/tar+gzip
        if: startsWith(matrix.os, 'ubuntu')

      - name: '[linux] Upload DEB'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.deb
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.deb
          asset_content_type: application/vnd.debian.binary-package
        if: startsWith(matrix.os, 'ubuntu')

      - name: '[windows] Upload ZIP'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.zip
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.zip
          asset_content_type: application/zip
        if: startsWith(matrix.os, 'windows')

      - name: '[windows] Upload MSI'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.msi
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.msi
          asset_content_type: application/x-ole-storage
        if: startsWith(matrix.os, 'windows')

      - name: '[macos] Upload TZST'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.tar.zst
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.tar.zst
          asset_content_type: application/tar+gzip
        if: startsWith(matrix.os, 'macos')

      - name: '[macos] Upload DMG'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.dmg
          asset_name: EFIBootEditor-${{ steps.vars.outputs.version }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}.dmg
          asset_content_type: application/octet-stream
        if: startsWith(matrix.os, 'macos')
