name: 'Build test'

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '36 10 * * 5'

jobs:
  build:
    name: ${{ matrix.os }} Qt ${{ matrix.qt_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2022] #, macos-11]
        qt_version:
          - 5.15.2 # LTS
          - 6.2.2 # latest
        include:
          - os: ubuntu-18.04
            qt_version: 5.15.2

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'cpp'

      - name: 'Dependencies: restore Qt from cache'
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ../Qt
          key: qt-${{ matrix.os }}-${{ matrix.qt_version }}

      - name: 'Dependencies: set up Qt environment'
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: ${{ matrix.qt_version }}
          modules: 'qt5compat'

      - name: '[linux] Dependencies: install efivar'
        run: sudo apt-get install libefiboot1 libefiboot-dev libefivar-dev
        shell: bash
        if: startsWith(matrix.os, 'ubuntu')

      - name: 'Configure: create build directory'
        run: mkdir -p build/debug

      - name: '[linux] Configure: build with clang'
        run: |
          CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=Debug ..
        shell: bash
        env:
          BUILD_VERSION: 0.0.0-${{ github.sha }}
          BUILD_OS: ${{ matrix.os }}
        working-directory: build
        if: startsWith(matrix.os, 'ubuntu')

      - name: '[unix] Build'
        run: |
          cmake --build . --config Debug --target package
        shell: bash
        working-directory: build
        if: ${{ ! startsWith(matrix.os, 'windows') }}

      - name: '[windows] Configure: build with MSVC'
        run: |
          call "%programfiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_SYSTEM_VERSION=10.0.19041.0 .. || exit /b
        shell: cmd
        env:
          BUILD_VERSION: 0.0.0-${{ github.sha }}
          BUILD_OS: ${{ matrix.os }}
        working-directory: build
        if: startsWith(matrix.os, 'windows')

      - name: '[windows] Build'
        run: |
          call "%programfiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b
          cmake --build . --config Debug --target package || exit /b
        shell: cmd
        working-directory: build
        if: startsWith(matrix.os, 'windows')

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ matrix.os }}-qt-${{ matrix.qt_version }}
          path: |
            build/dist
            !build/dist/_CPack_Packages
