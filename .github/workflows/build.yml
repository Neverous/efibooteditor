name: Build EFIBootEditor

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      build-config:
        required: true
        type: string
      version:
        required: true
        type: string

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  build:
    name: ${{ inputs.os }} Qt ${{ matrix.qt-version }} with ${{ inputs.compiler }}
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
      matrix:
        qt-version:
          - 5.12.12 # Supported in Ubuntu Focal Fossa until 2025-04-02
          - 5.15.2 # Supported in Ubuntu Jammy Jellyfish until 2027-04-01
          - 6.2.4 # Supported in Ubuntu Jammy Jellyfish until 2027-04-01
          - 6.5.3 # Supported until 2024-03-31
          - 6.6.1 # Supported until 2024-03-10
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ inputs.os }}-${{ inputs.compiler }}-${{ inputs.build-config }}-${{ matrix.qt-version }}
          restore-keys: |
            ${{ inputs.os }}-${{ inputs.compiler }}-${{ inputs.build-config }}-

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: cpp
          queries: security-and-quality
        if: inputs.build-config == 'Debug'
        continue-on-error: true

      - name: Set up Qt environment
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          version: ${{ matrix.qt-version }}

      - name: Install libfuse2
        run: sudo apt-get install libfuse2
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install linuxdeploy
        uses: miurahr/install-linuxdeploy-action@v1
        with:
          plugins: qt
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install efivar
        run: sudo apt-get install libefiboot1 libefiboot-dev libefivar-dev
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install libxkbcommon-x11-0 and libxcb-cursor0
        run: sudo apt-get install libxkbcommon-x11-0 libxcb-cursor0
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Create build directory
        run: mkdir -p build
        shell: bash

      - name: Configure build with ${{ inputs.compiler }}
        run: |
          case "${{ inputs.compiler }}" in
            "Clang")
              export CC=clang;
              export CXX=clang++;
            ;;
            "GCC")
              export CC=gcc
              export CXX=g++
            ;;
          esac;
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build-config }} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        shell: bash
        env:
          BUILD_VERSION: ${{ inputs.version }}
          BUILD_OS: ${{ inputs.os }}
        working-directory: build
        if: ${{ !startsWith(inputs.os, 'windows') }}

      - name: Configure build with ${{ inputs.compiler }}
        run: |
          call "${{ endsWith(inputs.os, '2019') && '%programfiles(x86)%\Microsoft Visual Studio\2019' || '%programfiles%\Microsoft Visual Studio\2022' }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build-config }} ${{ endsWith(inputs.os, '2019') && '-DCMAKE_SYSTEM_VERSION=10.0.18362.0' || ''}} -DCMAKE_VERBOSE_MAKEFILE=ON ${{ inputs.compiler == 'Clang' && '-T ClangCL' || '' }} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache .. || exit /b
        shell: cmd
        env:
          BUILD_VERSION: ${{ inputs.version }}
          BUILD_OS: ${{ inputs.os }}
        working-directory: build
        if: startsWith(inputs.os, 'windows')

      - name: Build
        run: cmake --build . --config ${{ inputs.build-config }}
        shell: bash
        working-directory: build

      - name: Package
        run: |
          for t in $(seq 1 20); do # FIXME: macOS has random hdiutil errors because of some protection mechanisms, just retry few times https://github.com/actions/runner-images/issues/7522#issuecomment-1556766641
            cmake --build . --config ${{ inputs.build-config }} --target package && exit 0
            rm -rf dist/
          done
          exit 255
        shell: bash
        working-directory: build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        if: inputs.build-config == 'Debug'
        continue-on-error: true

      - name: Perform MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@96315324a485db21449515180214ecb78c16a1c5
        id: msvc-analysis
        with:
          cmakeBuildDirectory: ${{ github.workspace }}/build
          buildConfiguration: ${{ inputs.build-config }}
          ruleset: NativeRecommendedRules.ruleset
        if: inputs.build-config == 'Debug' && inputs.compiler == 'MSVC'
        continue-on-error: true

      - name: Upload MSVC Code Analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.msvc-analysis.outputs.sarif }}
        if: inputs.build-config == 'Debug' && inputs.compiler == 'MSVC'
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ inputs.os }}-qt-${{ matrix.qt-version }}-${{ inputs.compiler }}
          if-no-files-found: error
          path: build/dist/EFIBootEditor-*
