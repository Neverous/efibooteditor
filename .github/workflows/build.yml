name: Build EFIBootEditor

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      build-config:
        required: true
        type: string
      version:
        required: true
        type: string

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  build:
    name: ${{ inputs.os }} Qt ${{ matrix.qt-version }} with ${{ inputs.compiler }}
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
      matrix:
        qt-version:
          - 5.12.12 # Supported in Ubuntu Focal Fossa until 2025-05-31
          - 5.15.2 # Supported in Ubuntu Noble Numbat until 2029-04-25
          - 6.2.4 # Supported in Ubuntu Jammy Jellyfish until 2027-04-01
          - 6.8.2 # Supported until 2025-04-08
        exclude:
          - qt-version: ${{ inputs.compiler == 'MSVC32' && '6.2.4' || 'none' }}
          - qt-version: ${{ inputs.compiler == 'MSVC32' && '6.8.2' || 'none' }}
          - qt-version: ${{ endsWith(inputs.os, 'arm') && '5.12.12' || 'none' }}
          - qt-version: ${{ endsWith(inputs.os, 'arm') && '5.15.2' || 'none' }}
          - qt-version: ${{ endsWith(inputs.os, 'arm') && '6.2.4' || 'none' }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@a1209f81afb8c005c13b4296c32e363431bffea5
        with:
          key: ${{ inputs.os }}-${{ inputs.compiler }}-${{ inputs.build-config }}-${{ matrix.qt-version }}
          restore-keys: |
            ${{ inputs.os }}-${{ inputs.compiler }}-${{ inputs.build-config }}
            ${{ inputs.os }}-${{ inputs.compiler }}
            ${{ inputs.os }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@5f8171a638ada777af81d42b55959a643bb29017
        with:
          languages: cpp
          queries: security-and-quality
        if: inputs.build-config == 'Debug'
        continue-on-error: true

      - name: Set up Qt environment
        uses: jdpurcell/install-qt-action@ebdf7dca0e4b4000b6c98c745326d1aa8715b14f
        with:
          cache: true
          version: ${{ matrix.qt-version }}
          arch: ${{ inputs.compiler == 'MSVC32' && (matrix.qt-version == '5.12.12' && 'win32_msvc2017' || 'win32_msvc2019') || '' }}

      - name: Install libfuse2
        run: sudo apt-get install libfuse2
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install linuxdeploy
        run: |
          DIR=$(mktemp -d)
          echo "${DIR}" >> ${GITHUB_PATH}
          ARCH=${{ endsWith(inputs.os, 'arm') && 'aarch64' || 'x86_64' }}
          wget -c -nv https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${ARCH}.AppImage -O ${DIR}/linuxdeploy.AppImage
          wget -c -nv https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-${ARCH}.AppImage -O ${DIR}/linuxdeploy-plugin-qt.AppImage
          chmod +x ${DIR}/*.AppImage
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install efivar
        run: sudo apt-get install libefiboot1 libefiboot-dev libefivar-dev
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install libxkbcommon-x11-0 and libxcb-cursor0 and zlib1g-dev
        run: sudo apt-get install libxkbcommon-x11-0 libxcb-cursor0 zlib1g-dev
        shell: bash
        if: startsWith(inputs.os, 'ubuntu')

      - name: Install zlib
        run: ${{ inputs.compiler == 'MSVC32' && 'VCPKG_DEFAULT_TRIPLET=x86-windows' || '' }} vcpkg install zlib
        shell: bash
        if: startsWith(inputs.os, 'windows')

      - name: Create build directory
        run: mkdir -p build
        shell: bash

      - name: Configure with ${{ inputs.compiler }}
        run: |
          case "${{ inputs.compiler }}" in
            "Clang")
              export CC=clang${{ inputs.os == 'ubuntu-20.04' && '-12' || '' }}; # Clang 11 crashes
              export CXX=clang++${{ inputs.os == 'ubuntu-20.04' && '-12' || '' }};
            ;;
            "GCC")
              export CC=gcc
              export CXX=g++
            ;;
          esac;
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build-config }} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ${{ startsWith(inputs.os, 'macos') && startsWith(matrix.qt-version, '5') && '-DCMAKE_OSX_ARCHITECTURES="x86_64"' || '' }} ..
        shell: bash
        env:
          BUILD_VERSION: ${{ inputs.version }}
          BUILD_OS: ${{ inputs.os }}
        working-directory: build
        if: ${{ !startsWith(inputs.os, 'windows') }}

      - name: Build
        run: cmake --build . --config ${{ inputs.build-config }}
        shell: bash
        working-directory: build
        if: ${{ !startsWith(inputs.os, 'windows') }}

      - name: Configure and build with ${{ inputs.compiler }}
        run: |
          call "${{ endsWith(inputs.os, '2019') && '%programfiles(x86)%\Microsoft Visual Studio\2019' || '%programfiles%\Microsoft Visual Studio\2022' }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ inputs.compiler == 'MSVC32' && 'x86' || 'x64' }} ${{ endsWith(inputs.os, '2019') && '10.0.18362.0' || '' }} || exit /b
          cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ inputs.build-config }} ${{ endsWith(inputs.os, '2019') && '-DCMAKE_SYSTEM_VERSION=10.0.18362.0' || '' }} -DCMAKE_VERBOSE_MAKEFILE=ON ${{ inputs.compiler == 'Clang' && '-DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_CXX_COMPILER=clang-cl.exe' || '' }} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache .. || exit /b
          cmake --build . --config ${{ inputs.build-config }}
        shell: cmd
        env:
          BUILD_VERSION: ${{ inputs.version }}
          BUILD_OS: ${{ inputs.os }}
        working-directory: build
        if: startsWith(inputs.os, 'windows')

      - name: Package
        run: |
          for t in $(seq 1 20); do # FIXME: macOS has random hdiutil errors because of some protection mechanisms, just retry few times https://github.com/actions/runner-images/issues/7522#issuecomment-1556766641
            cmake --build . --config ${{ inputs.build-config }} --target package && exit 0
            rm -rf dist/
          done
          exit 255
        shell: bash
        working-directory: build

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: EFIBootEditor-${{ github.sha }}-${{ inputs.os }}-qt-${{ matrix.qt-version }}-${{ inputs.compiler }}
          if-no-files-found: error
          path: build/dist/EFIBootEditor-*

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@5f8171a638ada777af81d42b55959a643bb29017
        if: inputs.build-config == 'Debug'
        continue-on-error: true
